name: Windows
on:
  push:
    paths-ignore:
      - '.clang-tidy'
      - 'LICENSE'
      - 'README.md'
jobs:
  ninja:
    name: Ninja
    runs-on: windows-2025
    strategy:
      matrix:
        include:
          - config: Release
          - config: Debug
      fail-fast: false
    env:
      CMAKE_GENERATOR: Ninja
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}\build\_SeirDownloads
          key: windows-${{ hashFiles('cmake/SeirPackages/*.cmake') }}
      - uses: seanmiddleditch/gha-setup-vsdevenv@master
      - name: Install prerequisites
        run: |
          choco install --no-progress ninja
          Invoke-WebRequest `
            -Uri https://sdk.lunarg.com/sdk/download/1.3.250.1/windows/VulkanSDK-1.3.250.1-Installer.exe `
            -OutFile VulkanSDK-1.3.250.1-Installer.exe
          & '${{ github.workspace }}\VulkanSDK-1.3.250.1-Installer.exe' install --accept-licenses --confirm-command
      - name: Run CMake
        run: |
          $Env:VULKAN_SDK = "C:\VulkanSDK\$(Get-ChildItem 'C:\VulkanSDK' -Name)"
          cmake -S . -B build `
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\install" `
            -DSEIR_AUDIO_OGGVORBIS=ON `
            -DSEIR_AUDIO_WAV=ON `
            -DSEIR_BENCHMARKS=ON `
            -DSEIR_COMPRESSION_ZLIB=ON `
            -DSEIR_COMPRESSION_ZSTD=ON `
            -DSEIR_EXAMPLES=ON `
            -DSEIR_IMAGE_BMP=ON `
            -DSEIR_IMAGE_DDS=ON `
            -DSEIR_IMAGE_ICO=ON `
            -DSEIR_IMAGE_JPEG=ON `
            -DSEIR_IMAGE_PNG=ON `
            -DSEIR_IMAGE_TGA=ON `
            -DSEIR_IMAGE_WEBP=ON `
            -DSEIR_STATIC_RUNTIME=${{ matrix.config != 'Debug' && 'ON' || 'OFF' }} `
            -DSEIR_TESTS=ON
      - name: Build
        run: |
          cmake --build build
      - name: Run tests
        run: |
          ctest --verbose --label-exclude renderer --test-dir build
      - name: Build usage examples
        run: |
          cmake -S examples\usage\cmake_fetchcontent -B build.cmake_fetchcontent `
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} `
            -DREPLACE_WITH_COMMIT_HASH=${{ github.sha }}
          cmake --build build.cmake_fetchcontent
          cmake --build build --target install
          cmake -S examples\usage\cmake_package -B build.cmake_package `
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} `
            -DCMAKE_PREFIX_PATH="${{ github.workspace }}\install" `
            -DSTATIC_RUNTIME=${{ matrix.config != 'Debug' && 'ON' || 'OFF' }}
          cmake --build build.cmake_package
  visual-studio:
    # This job builds the project from Visual Studio solution generated by CMake.
    # It ensures it is a valid way to build Seir.
    name: Visual Studio
    runs-on: windows-2025
    env:
      CMAKE_GENERATOR: Visual Studio 17 2022
      CMAKE_GENERATOR_PLATFORM: Win32
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}\build\_SeirDownloads
          key: windows-${{ hashFiles('cmake/SeirPackages') }}
      - name: Run CMake
        run: |
          cmake -S . -B build `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\install" `
            -DSEIR_AUDIO_OGGVORBIS=ON `
            -DSEIR_AUDIO_WAV=ON `
            -DSEIR_COMPRESSION_ZLIB=ON `
            -DSEIR_COMPRESSION_ZSTD=ON `
            -DSEIR_IMAGE_BMP=ON `
            -DSEIR_IMAGE_DDS=ON `
            -DSEIR_IMAGE_ICO=ON `
            -DSEIR_IMAGE_JPEG=ON `
            -DSEIR_IMAGE_PNG=ON `
            -DSEIR_IMAGE_TGA=ON `
            -DSEIR_IMAGE_WEBP=ON `
            -DSEIR_RENDERER_BACKEND= `
            -DSEIR_TESTS=ON
      - name: Build Debug
        run: |
          cmake --build build --config Debug --parallel -- /nologo
          cmake --build build --config Debug --target install -- /nologo
      - name: Build RelWithDebInfo
        run: |
          cmake --build build --config RelWithDebInfo --parallel -- /nologo
          cmake --build build --config RelWithDebInfo --target install -- /nologo
      - name: Run tests
        run: |
          ctest --verbose --build-config Debug --test-dir build
