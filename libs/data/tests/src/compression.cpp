// This file is part of Seir.
// Copyright (C) Sergei Blagodarin.
// SPDX-License-Identifier: Apache-2.0

#include <seir_data/compression.hpp>

#include <algorithm>
#include <iterator>
#include <vector>

#include <doctest/doctest.h>

#if SEIR_COMPRESSION_ZLIB || SEIR_COMPRESSION_ZSTD
TEST_CASE("Compression")
{
	// The generated byte sequence is [00 00 00 00 01 01 01 01 ... ff ff ff ff 00 00 00 00 ... ff ff ff ff].
	// It should be compressible even with the worst practical compression algorithms (e. g. RLE).
	std::vector<uint8_t> original;
	std::generate_n(std::back_inserter(original), 4 * 256 * 2, [i = -1]() mutable { return static_cast<uint8_t>((i += 1) / 4); });
	const auto checkCompression = [&original](seir::Compression compression, seir::CompressionLevel level) {
		std::vector<uint8_t> compressed;
		{
			const auto compressor = seir::Compressor::create(compression);
			REQUIRE(compressor);
			REQUIRE(compressor->prepare(level));
			compressed.resize(compressor->maxCompressedSize(original.size()));
			REQUIRE(compressed.size() > 0);
			compressed.resize(compressor->compress(compressed.data(), compressed.size(), original.data(), original.size()));
		}
		REQUIRE(compressed.size() > 0);
		MESSAGE("Compressed ", original.size(), " bytes into ", compressed.size(), " bytes");
		CHECK(compressed.size() < original.size());
		std::vector<uint8_t> decompressed(original.size());
		{
			const auto decompressor = seir::Decompressor::create(compression);
			REQUIRE(decompressor);
			REQUIRE(decompressor->decompress(decompressed.data(), decompressed.size(), compressed.data(), compressed.size()));
		}
		CHECK(decompressed == original);
	};
#	if SEIR_COMPRESSION_ZLIB
	SUBCASE("Compression::Zlib")
	{
		SUBCASE("CompressionLevel::BestSpeed") { checkCompression(seir::Compression::Zlib, seir::CompressionLevel::BestSpeed); }
		SUBCASE("CompressionLevel::BestCompression") { checkCompression(seir::Compression::Zlib, seir::CompressionLevel::BestCompression); }
	}
#	endif
#	if SEIR_COMPRESSION_ZSTD
	SUBCASE("Compression::Zstd")
	{
		SUBCASE("CompressionLevel::BestSpeed") { checkCompression(seir::Compression::Zstd, seir::CompressionLevel::BestSpeed); }
		SUBCASE("CompressionLevel::BestCompression") { checkCompression(seir::Compression::Zstd, seir::CompressionLevel::BestCompression); }
	}
#	endif
}
#endif

TEST_CASE("Compression::None")
{
	CHECK_FALSE(seir::Compressor::create(seir::Compression::None));
	CHECK_FALSE(seir::Decompressor::create(seir::Compression::None));
}
