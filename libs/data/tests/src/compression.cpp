// This file is part of Seir.
// Copyright (C) Sergei Blagodarin.
// SPDX-License-Identifier: Apache-2.0

#include <seir_data/compression.hpp>

#include <algorithm>
#include <iterator>
#include <vector>

#include <doctest/doctest.h>

TEST_CASE("Compression")
{
	seir::UniquePtr<seir::Compressor> compressor;
	seir::UniquePtr<seir::Decompressor> decompressor;
	int compressionLevel = 0;
#if SEIR_COMPRESSION_ZLIB
	SUBCASE("Zlib")
	{
		compressor = seir::Compressor::create(seir::Compression::Zlib);
		decompressor = seir::Decompressor::create(seir::Compression::Zlib);
		compressionLevel = 9;
	}
#endif
	REQUIRE(compressor);
	REQUIRE(decompressor);

	// The generated byte sequence is [00 00 00 00 01 01 01 01 ... ff ff ff ff 00 00 00 00 ... ff ff ff ff].
	// It should be compressible even with the worst compression algorithms (e. g. RLE).
	std::vector<uint8_t> original;
	std::generate_n(std::back_inserter(original), 4 * 256 * 2, [i = -1]() mutable { return static_cast<uint8_t>((i += 1) / 4); });

	std::vector<uint8_t> compressed;
	REQUIRE(compressor->prepare(compressionLevel));
	compressed.resize(compressor->maxCompressedSize(original.size()));
	REQUIRE(compressed.size() > 0);
	compressed.resize(compressor->compress(compressed.data(), compressed.size(), original.data(), original.size()));
	REQUIRE(compressed.size() > 0);
	CHECK(compressed.size() < original.size());

	std::vector<uint8_t> decompressed(original.size());
	REQUIRE(decompressor->decompress(decompressed.data(), decompressed.size(), compressed.data(), compressed.size()));
	CHECK(decompressed == original);
}
